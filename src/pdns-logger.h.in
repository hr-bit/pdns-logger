/*
 * Powerdns logger daemon
 * ----------------------
 *
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright (C) 2017, Spamhaus Technology Ltd, London
 *
 * The Initial developer of the Original code is:
 * Massimo Cetra
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <protobuf-c/protobuf-c.h>
#include <assert.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include "pdns-logger-dns.h"

#define PDNS_LOGGER_VERSION 171001
#define DEFAULT_CONFIG_FILE "@PROJECT_SYSCONF_DIR@" "pdns-logger.ini"

typedef enum pdns_status_e {
    PDNS_NO,
    PDNS_OK,
    PDNS_FORK,
    PDNS_RETRY
} pdns_status_t;

#define zstr(x)  ( ((x==NULL) || (*x == '\0')) ? 1 : 0)
#define safe_free(x) if(x != NULL) { free( (void*) x); x = NULL; }

typedef struct globals_s globals_t;
struct globals_s {
    char *user;
    char *group;

    char *config_file;
    char *bind_ip;
    int  bind_port;

    char allow_root;
    char foreground;

    char running;
    char verbose;

    int socket;
};

typedef struct fifo_s fifo_t;
fifo_t *fifo_init(void);
pdns_status_t fifo_push_item(fifo_t *fifo, void *data);
void *fifo_pop_item(fifo_t *fifo);
void fifo_lock(fifo_t *fifo);
void fifo_unlock(fifo_t *fifo);


typedef pdns_status_t(*init_function_f)(const char *inifile);
typedef pdns_status_t(*rotate_function_f)(void);
typedef pdns_status_t(*stop_function_f)(void);
typedef pdns_status_t(*log_function_f)(void *rawpb);

typedef struct pdns_logger_s pdns_logger_t;
struct pdns_logger_s {
    init_function_f     start;
    rotate_function_f   rotate;
    stop_function_f     stop;
    log_function_f      log;
};

extern pdns_logger_t logfile_engine;
extern pdns_logger_t syslog_engine;
extern pdns_logger_t sqlite_engine;
extern pdns_logger_t jsonfile_engine;

pdns_status_t parse_config_file(const char *cf, globals_t *globals);
pdns_status_t pdns_socket_run(globals_t *globals);
pdns_status_t pdns_loggers_log(void *pbm);
